// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	datasetsFieldNames          = builder.RawFieldNames(&Datasets{}, true)
	datasetsRows                = strings.Join(datasetsFieldNames, ",")
	datasetsRowsExpectAutoSet   = strings.Join(stringx.Remove(datasetsFieldNames), ",")
	datasetsRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(datasetsFieldNames, "id"))
)

type (
	datasetsModel interface {
		Insert(ctx context.Context, data *Datasets) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Datasets, error)
		Update(ctx context.Context, data *Datasets) error
		Delete(ctx context.Context, id int64) error
		GetAll(ctx context.Context) ([]*Datasets, error)
		GetPageList(ctx context.Context, page, pageSize int64) ([]*Datasets, error)
	}

	defaultDatasetsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Datasets struct {
		Name        string    `db:"name"`        // 数据集名称
		Title       string    `db:"title"`       // 数据集标题
		Summary     string    `db:"summary"`     // 数据集摘要
		Description string    `db:"description"` // 数据集描述信息
		Tags        string    `db:"tags"`        // 数据集标签
		DatasetSize int64     `db:"dataset_size"`
		DatasetType string    `db:"dataset_type"` // 数据集类型
		UpdateAt    time.Time `db:"update_at"`
		CreateAt    time.Time `db:"create_at"`
		Id          int64     `db:"id"`
	}
)

func newDatasetsModel(conn sqlx.SqlConn) *defaultDatasetsModel {
	return &defaultDatasetsModel{
		conn:  conn,
		table: `"public"."datasets"`,
	}
}

func (m *defaultDatasetsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultDatasetsModel) FindOne(ctx context.Context, id int64) (*Datasets, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", datasetsRows, m.table)
	var resp Datasets
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDatasetsModel) Insert(ctx context.Context, data *Datasets) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)", m.table, datasetsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Title, data.Summary, data.Description, data.Tags, data.DatasetSize, data.DatasetType, data.UpdateAt, data.CreateAt, data.Id)
	return ret, err
}

func (m *defaultDatasetsModel) Update(ctx context.Context, data *Datasets) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, datasetsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.Title, data.Summary, data.Description, data.Tags, data.DatasetSize, data.DatasetType, data.UpdateAt, data.CreateAt)
	return err
}

func (m *defaultDatasetsModel) tableName() string {
	return m.table
}

func (m *defaultDatasetsModel) GetAll(ctx context.Context) ([]*Datasets, error) {
	query := fmt.Sprintf("select %s from %s", datasetsRows, m.table)
	var resp []*Datasets
	err := m.conn.QueryRowCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDatasetsModel) GetPageList(ctx context.Context, page, pageSize int64) ([]*Datasets, error) {
	if page < 1 {
		page = 1
	}
	dataOffset := (page - 1) * pageSize
	query := fmt.Sprintf("select %s from %s limit %d offset %d", datasetsRows, m.table, page, dataOffset)
	var resp []*Datasets
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
